{"version":3,"sources":["serviceWorker.js","features/reminder/ReminderAPI.js","features/reminder/reminderService.js","features/reminder/reminderActions.js","features/calendar/calendarSelectors.js","features/calendar/calendarActions.js","features/calendar/components/CalendarReminder.js","features/calendar/components/CalendarDate.js","features/calendar/components/Calendar.js","features/calendar/calendarService.js","features/reminder/reminderSelectors.js","features/calendar/components/CalendarContainer.js","features/credits/Credits.js","features/reminder/components/ReminderModal.js","features/weather/WeatherAPI.js","features/weather/weatherService.js","features/reminder/components/ReminderContainer.js","App.js","features/calendar/calendarReducer.js","features/reminder/reminderReducer.js","application/createRootReducer.js","index.js","application/configureStore.js"],"names":["Boolean","window","location","hostname","match","getData","R","reminderAPI","url","this","_axios","axios","create","baseURL","headers","payload","post","then","get","id","delete","put","process","createReminder","reminder","updateReminder","createActions","SET_MODAL_DISPLAY","SET_REMINDERS","SET_REMINDER_FIELD","prefix","setModalDisplay","setReminders","setReminderField","hideModal","dispatch","display","loadReminders","a","listReminders","reminders","getCalendar","monthSelector","createSelector","yearSelector","setDate","SET_DATE","CalendarReminder","onClick","className","classNames","color","toLowerCase","key","moment","datetime","format","name","CalendarDate","date","targetMonth","weekDay","day","weekend","inSameMonth","editReminder","event","stopPropagation","toISOString","map","filterByDate","startOfDay","clone","startOf","endOfDay","endOf","isSameOrAfter","isSameOrBefore","sortByDateAsc","filterReminders","Calendar","month","year","nextMonth","previousMonth","monthCalendar","weeks","startOfMonth","endOfMonth","weekOfMonth","week","dates","i","push","add","getMonthCalendar","title","dayOfYear","getReminder","asMutable","remindersSelector","displaySelector","reminderSelector","mapDispatchToProps","getState","showModal","CalendarContainer","connect","state","props","useState","loaded","setLoaded","useEffect","Link","href","newWindow","children","target","rel","Credits","isNotNil","hasId","getTitle","ReminderModal","onCancel","onClose","onRemove","onSave","updateField","updateRawField","aria-label","maxLength","onChange","placeholder","type","value","calendarIcon","clearIcon","disableCalendar","clockIcon","disableClock","src","WeatherAPI","apiKey","_apiKey","city","query","querystring","stringify","appid","cnt","weatherAPI","REACT_APP_WEATHER_API_URL","REACT_APP_WEATHER_API_KEY","getWeather","canFetchWeather","removeReminder","saveReminder","reminderService","ReminderContainer","time","getDailyForecast","weather","split","hours","minutes","App","initialState","Immutable","calendarReducer","handleActions","actions","set","modal","getMomentDatetime","bind","getDate","getTime","reminderReducer","setIn","combineReducers","calendar","store","preloadedState","middlewares","reduxThunk","reduxLogger","middlewareEnhancer","applyMiddleware","composedEnhancers","composeWithDevTools","createStore","createRootReducer","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9acc1d4c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as R from 'ramda';\n\nimport axios from 'axios';\n\nconst getData = R.prop('data');\n\nexport class ReminderAPI {\n  constructor(url) {\n    this._axios = axios.create({\n      baseURL: url,\n      headers: {\n        'Content-type': 'application/json',\n      },\n    });\n  }\n\n  get axios() {\n    return this._axios;\n  }\n\n  createReminder(payload) {\n    return this.axios.post(`/reminders`, payload).then(getData);\n  }\n\n  listReminders() {\n    return this.axios.get(`/reminders`).then(getData);\n  }\n\n  removeReminder(id) {\n    return this.axios.delete(`/reminders/${id}`).then(getData);\n  }\n\n  updateReminder(id, payload) {\n    return this.axios.put(`/reminders/${id}`, payload).then(getData);\n  }\n}\n","import { ReminderAPI } from './ReminderAPI';\n\nconst reminderAPI = new ReminderAPI(process.env.REACT_APP_REMINDER_API_URL);\n\nexport const createReminder = (reminder) => reminderAPI.createReminder(reminder);\n\nexport const listReminders = () => reminderAPI.listReminders();\n\nexport const removeReminder = (reminder) => reminderAPI.removeReminder(reminder);\n\nexport const updateReminder = ({ id, ...reminder }) => reminderAPI.updateReminder(id, reminder);\n","import * as R from 'ramda';\nimport * as reminderService from './reminderService';\n\nimport { createActions } from 'redux-actions';\n\nexport const { setModalDisplay, setReminders, setReminderField } = createActions(\n  {\n    SET_MODAL_DISPLAY: R.identity,\n    SET_REMINDERS: R.identity,\n    SET_REMINDER_FIELD: R.identity,\n  },\n  {\n    prefix: 'REMINDER',\n  },\n);\n\nexport const showModal = (reminder) => (dispatch) => {\n  dispatch(setModalDisplay({ display: true, reminder }));\n};\n\nexport const hideModal = () => (dispatch) => {\n  dispatch(setModalDisplay({ display: false }));\n};\n\nexport const loadReminders = () => async (dispatch) => {\n  const reminders = await reminderService.listReminders();\n  dispatch(setReminders(reminders));\n};\n\nexport const removeReminder = (id) => async (dispatch) => {\n  await reminderService.removeReminder(id);\n  dispatch(hideModal());\n  dispatch(loadReminders());\n};\n\nexport const saveReminder = (reminder) => async (dispatch) => {\n  if (R.propSatisfies(R.isNil, 'id', reminder)) {\n    await reminderService.createReminder(reminder);\n  } else {\n    await reminderService.updateReminder(reminder);\n  }\n  dispatch(hideModal());\n  dispatch(loadReminders());\n};\n","import * as R from 'ramda';\n\nimport { createSelector } from 'reselect';\n\nconst getCalendar = R.prop('calendar');\n\nexport const monthSelector = createSelector([getCalendar], R.prop('month'));\n\nexport const yearSelector = createSelector([getCalendar], R.prop('year'));\n","import * as R from 'ramda';\n\nimport { monthSelector, yearSelector } from './calendarSelectors';\n\nimport { createActions } from 'redux-actions';\nimport moment from 'moment';\n\nexport const { setDate } = createActions(\n  {\n    SET_DATE: R.identity,\n  },\n  {\n    prefix: 'REMINDER',\n  },\n);\n\nexport const nextMonth = () => (dispatch, getState) => {\n  const month = monthSelector(getState());\n  const year = yearSelector(getState());\n  const date = moment().year(year).month(month).add(1, 'month');\n  dispatch(setDate({ month: date.month(), year: date.year() }));\n};\n\nexport const previousMonth = () => (dispatch, getState) => {\n  const month = monthSelector(getState());\n  const year = yearSelector(getState());\n  const date = moment().year(year).month(month).add(-1, 'month');\n  dispatch(setDate({ month: date.month(), year: date.year() }));\n};\n","import './CalendarReminder.scss';\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport moment from 'moment';\n\nexport const CalendarReminder = ({ reminder, onClick }) => {\n  const className = classNames('calendar__date__reminder', `calendar__date__reminder--${reminder.color.toLowerCase()}`);\n  return (\n    <p key={reminder.id} className={className} onClick={onClick}>\n      {moment(reminder.datetime).format('HH:mm')} - {reminder.name}\n    </p>\n  );\n};\n","import './CalendarDate.scss';\n\nimport * as R from 'ramda';\n\nimport { CalendarReminder } from './CalendarReminder';\nimport React from 'react';\nimport classNames from 'classnames';\n\nexport const CalendarDate = ({ date, targetMonth, onClick, reminders }) => {\n  const weekDay = date.day();\n  const weekend = weekDay === 0 || weekDay === 6;\n  const inSameMonth = date.get('month') === targetMonth;\n  const className = classNames(\n    'calendar__date',\n    'calendar__date--active',\n    { 'calendar__date--weekend': weekend },\n    { 'calendar__date--out-of-month': !inSameMonth },\n  );\n  const createReminder = (event) => {\n    event.stopPropagation();\n    onClick({ datetime: date.toISOString() });\n  };\n  const editReminder = R.curry((reminder, event) => {\n    event.stopPropagation();\n    onClick(reminder);\n  });\n  return (\n    <div className={className} onClick={createReminder}>\n      <p className=\"calendar__date__day\">{date.get('date')}</p>\n      <div className=\"calendar__date__reminders\">\n        {reminders.map((reminder) => (\n          <CalendarReminder key={reminder.id} reminder={reminder} onClick={editReminder(reminder)} />\n        ))}\n      </div>\n    </div>\n  );\n};\n","import './Calendar.scss';\n\nimport * as R from 'ramda';\n\nimport { CalendarDate } from './CalendarDate';\nimport React from 'react';\nimport { getMonthCalendar } from '../calendarService';\nimport moment from 'moment';\n\nconst filterByDate = R.curry((date, reminder) => {\n  const startOfDay = date.clone().startOf('day');\n  const endOfDay = date.clone().endOf('day');\n  const datetime = moment(reminder.datetime);\n  return datetime.isSameOrAfter(startOfDay) && datetime.isSameOrBefore(endOfDay);\n});\n\nconst sortByDateAsc = R.sortBy(R.prop('datetime'));\n\nconst filterReminders = (date, reminders) => R.pipe(R.filter(filterByDate(date)), sortByDateAsc)(reminders);\n\nexport const Calendar = ({ month, year, onClick, reminders, nextMonth, previousMonth }) => {\n  const monthCalendar = getMonthCalendar(month, year);\n  return (\n    <div className=\"calendar\">\n      <div className=\"calendar__header\">\n        <div className=\"calendar__header__menu\">\n          <span\n            className=\"calendar__header__menu__arrow calendar__header__menu__arrow--left\"\n            onClick={previousMonth}\n            title=\"Previous month\"\n          >\n            <i className=\"fa fa-arrow-left\" />\n          </span>\n          <h1>{moment().year(year).month(month).startOf('month').format('MMM / yyyy')}</h1>\n          <span\n            className=\"calendar__header__menu__arrow calendar__header__menu__arrow--right\"\n            onClick={nextMonth}\n            title=\"Next month\"\n          >\n            <i className=\"fa fa-arrow-right\" />\n          </span>\n        </div>\n      </div>\n      <div className=\"calendar__header\">\n        <div className=\"calendar__header__week-day\">Sunday</div>\n        <div className=\"calendar__header__week-day\">Monday</div>\n        <div className=\"calendar__header__week-day\">Tuesday</div>\n        <div className=\"calendar__header__week-day\">Wednesday</div>\n        <div className=\"calendar__header__week-day\">Thursday</div>\n        <div className=\"calendar__header__week-day\">Friday</div>\n        <div className=\"calendar__header__week-day\">Saturday</div>\n      </div>\n      <div className=\"calendar__body\">\n        {monthCalendar.weeks.map((week) => (\n          <div key={week.weekOfMonth} className=\"calendar__body__week\">\n            {week.dates.map((date) => (\n              <CalendarDate\n                key={date.dayOfYear()}\n                date={date}\n                targetMonth={month}\n                onClick={onClick}\n                reminders={filterReminders(date, reminders)}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import moment from 'moment';\n\nexport const getCurrentMonth = () => moment().get('month');\n\nexport const getCurrentYear = () => moment().get('year');\n\nexport const getMonthCalendar = (month, year) => {\n  const monthCalendar = {\n    weeks: [],\n  };\n\n  const startOfMonth = moment().month(month).year(year).startOf('month');\n  const endOfMonth = startOfMonth.clone().endOf('month').endOf('day');\n\n  let date = startOfMonth.clone().startOf('week');\n  let weekOfMonth = 0;\n\n  while (date.isSameOrBefore(endOfMonth)) {\n    const week = {\n      weekOfMonth,\n      dates: [],\n    };\n    for (let i = 0; i < 7; i++) {\n      week.dates.push(date);\n      date = date.clone().add(1, 'days');\n    }\n    monthCalendar.weeks.push(week);\n    weekOfMonth++;\n  }\n\n  return monthCalendar;\n};\n","import * as R from 'ramda';\n\nimport { createSelector } from 'reselect';\n\nconst getReminder = R.prop('reminder');\n\nconst asMutable = R.invoker(0, 'asMutable');\n\nexport const remindersSelector = createSelector([getReminder], R.pipe(R.prop('reminders'), asMutable));\n\nexport const displaySelector = createSelector([getReminder], R.path(['modal', 'display']));\n\nexport const reminderSelector = createSelector([getReminder], R.path(['modal', 'reminder']));\n","import React, { useEffect, useState } from 'react';\nimport { loadReminders, showModal } from '../../reminder/reminderActions';\nimport { monthSelector, yearSelector } from '../calendarSelectors';\nimport { nextMonth, previousMonth } from '../calendarActions';\n\nimport { Calendar } from './Calendar';\nimport { connect } from 'react-redux';\nimport { remindersSelector } from '../../reminder/reminderSelectors';\n\nexport const _CalendarContainer = (props) => {\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    props.loadReminders().then(() => {\n      setLoaded(true);\n    });\n  }, [loaded]);\n  return (\n    <Calendar\n      month={props.month}\n      year={props.year}\n      onClick={props.showModal}\n      reminders={props.reminders}\n      nextMonth={props.nextMonth}\n      previousMonth={props.previousMonth}\n    />\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  month: monthSelector(state),\n  reminders: remindersSelector(state),\n  year: yearSelector(state),\n});\n\nconst mapDispatchToProps = {\n  nextMonth,\n  previousMonth,\n  loadReminders,\n  showModal,\n};\n\nexport const CalendarContainer = connect(mapStateToProps, mapDispatchToProps)(_CalendarContainer);\n","import './Credits.scss';\n\nimport React from 'react';\n\nconst Link = ({ href, newWindow = false, children }) => {\n  const props = { href };\n  if (newWindow) {\n    props.target = '_blank';\n    props.rel = 'noreferrer';\n  }\n  return <a {...props}>{children}</a>;\n};\n\nexport const Credits = () => (\n  <div className=\"credits\">\n    <p>\n      <Link href=\"https://www.iconfinder.com/icons/299096/calendar_clock_icon\" newWindow>\n        Icons\n      </Link>{' '}\n      by{' '}\n      <Link href=\"https://www.iconfinder.com/paomedia\" newWindow>\n        Paomedia\n      </Link>{' '}\n      /&nbsp;\n      <Link href=\"https://creativecommons.org/licenses/by/3.0/\" newWindow>\n        CC BY 3.0\n      </Link>\n    </p>\n  </div>\n);\n","import './ReminderModal.scss';\n\nimport * as R from 'ramda';\n\nimport DatePicker from 'react-date-picker';\nimport React from 'react';\nimport TimePicker from 'react-time-picker';\nimport classNames from 'classnames';\n\nconst isNotNil = R.complement(R.isNil);\n\nconst hasId = R.ifElse(R.isNil, R.F, R.propSatisfies(isNotNil, 'id'));\n\nconst getTitle = R.ifElse(hasId, R.always('Update reminder'), R.always('Create reminder'));\n\nexport const ReminderModal = ({ display, onCancel, onClose, onRemove, onSave, reminder, updateField }) => {\n  const updateRawField = R.curry((name, event) => updateField(name, R.path(['target', 'value'], event)));\n  return (\n    <div className={classNames('modal', { 'is-active': display })}>\n      <div className=\"modal-background\" />\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <p className=\"modal-card-title\">{getTitle(reminder)}</p>\n          <button className=\"delete\" aria-label=\"close\" onClick={onClose} />\n        </header>\n        <section className=\"modal-card-body\">\n          <div className=\"field is-grouped\">\n            <div className=\"control\">\n              <label className=\"label\">Name</label>\n              <input\n                className=\"input\"\n                maxLength={30}\n                onChange={updateRawField('name')}\n                placeholder=\"Name\"\n                type=\"text\"\n                value={R.prop('name', reminder)}\n              />\n            </div>\n            <div className=\"control\">\n              <label className=\"label\">Date</label>\n              <DatePicker\n                calendarIcon={null}\n                clearIcon={null}\n                disableCalendar\n                onChange={updateField('date')}\n                value={R.prop('date', reminder)}\n              />\n            </div>\n            <div className=\"control\">\n              <label className=\"label\">Time</label>\n              <TimePicker\n                clearIcon={null}\n                clockIcon={null}\n                disableClock\n                onChange={updateField('time')}\n                value={R.prop('time', reminder)}\n              />\n            </div>\n          </div>\n          <div className=\"field is-grouped\">\n            <div className=\"control\">\n              <label className=\"label\">City</label>\n              <input\n                className=\"input\"\n                onChange={updateRawField('city')}\n                placeholder=\"City\"\n                type=\"text\"\n                value={R.prop('city', reminder)}\n              />\n            </div>\n            <div className=\"control\">\n              <label className=\"label\">Color</label>\n              <div className=\"select\">\n                <select value={R.prop('color', reminder)} onChange={updateRawField('color')}>\n                  <option value=\"Blue\">Blue</option>\n                  <option value=\"Cyan\">Cyan</option>\n                  <option value=\"Green\">Green</option>\n                  <option value=\"Red\">Red</option>\n                  <option value=\"Turquoise\">Turquoise</option>\n                  <option value=\"Yellow\">Yellow</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"control is-disabled\" title={R.path(['weather', 'description'], reminder)}>\n              <label className=\"label\">Weather</label>\n              <p className=\"reminder-modal__weather\">\n                {R.path(['weather', 'icon'], reminder) ? (\n                  <>\n                    {R.path(['weather', 'main'], reminder)}\n                    <img src={`http://openweathermap.org/img/wn/${R.path(['weather', 'icon'], reminder)}.png`} />\n                  </>\n                ) : (\n                  <span className=\"has-text-grey\">No information</span>\n                )}\n              </p>\n            </div>\n          </div>\n        </section>\n        <footer className=\"modal-card-foot\">\n          <button className=\"button\" onClick={onCancel}>\n            Cancel\n          </button>\n          <div className=\"reminder__modal__buttons--right\">\n            {hasId(reminder) && (\n              <button className=\"button is-danger\" onClick={onRemove}>\n                Remove\n              </button>\n            )}\n            <button className=\"button is-success\" onClick={onSave}>\n              Save changes\n            </button>\n          </div>\n        </footer>\n      </div>\n    </div>\n  );\n};\n","import * as R from 'ramda';\n\nimport axios from 'axios';\nimport querystring from 'querystring';\n\nconst getData = R.prop('data');\n\nexport class WeatherAPI {\n  constructor(url, apiKey) {\n    this._apiKey = apiKey;\n    this._axios = axios.create({\n      baseURL: url,\n      headers: {\n        'Content-type': 'application/json',\n      },\n    });\n  }\n\n  get axios() {\n    return this._axios;\n  }\n\n  getDailyForecast(city) {\n    const query = querystring.stringify({ appid: this._apiKey, cnt: 1, city });\n    // return this.axios.get(`/forecast/daily?${query}`).then(getData);\n    // FIXME: since my API_KEY is not working, I had to mock the http request\n    return this.axios.get(`http://www.mocky.io/v2/5ec1dbbf2f00006600c34e0e?${query}`).then(getData);\n  }\n}\n","import { WeatherAPI } from './WeatherAPI';\n\nconst { REACT_APP_WEATHER_API_URL: url, REACT_APP_WEATHER_API_KEY: key } = process.env;\n\nconst weatherAPI = new WeatherAPI(url, key);\n\nexport const getDailyForecast = ({ city, date, time }) => weatherAPI.getDailyForecast(city, date, time);\n","import * as R from 'ramda';\n\nimport React, { useEffect } from 'react';\nimport { displaySelector, reminderSelector } from '../reminderSelectors';\nimport { hideModal, removeReminder, saveReminder, setReminderField } from '../reminderActions';\n\nimport { ReminderModal } from './ReminderModal';\nimport { connect } from 'react-redux';\nimport { getDailyForecast } from '../../weather/weatherService';\nimport moment from 'moment';\n\nconst getWeather = R.pipe(R.prop('list'), R.nth(0), R.prop('weather'), R.nth(0));\n\nconst canFetchWeather = R.allPass([R.prop('city'), R.prop('date'), R.prop('time')]);\n\nexport const _ReminderContainer = (props) => {\n  const updateField = R.curry((name, value) => props.setReminderField({ name, value }));\n\n  const removeReminder = () => props.removeReminder(R.prop('id', props.reminder));\n\n  const saveReminder = () => {\n    const reminder = R.pick(['id', 'name', 'city', 'color'], props.reminder);\n    const date = R.prop('date', props.reminder);\n    const [hours, minutes] = R.prop('time', props.reminder).split(':');\n    const datetime = moment(date).hours(hours).minutes(minutes).toISOString();\n    props.saveReminder({ ...reminder, datetime });\n  };\n\n  useEffect(() => {\n    if (canFetchWeather(props.reminder)) {\n      getDailyForecast(R.pick(['city', 'date', 'time'], props.reminder))\n        .then(getWeather)\n        .then((weather) => updateField('weather', weather));\n    }\n  }, [R.prop('city', props.reminder), R.prop('date', props.reminder), R.prop('time', props.reminder)]);\n\n  return (\n    <ReminderModal\n      display={props.display}\n      onCancel={props.hideModal}\n      onClose={props.hideModal}\n      onRemove={removeReminder}\n      onSave={saveReminder}\n      reminder={props.reminder}\n      updateField={updateField}\n    />\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  display: displaySelector(state),\n  reminder: reminderSelector(state),\n});\n\nconst mapDispatchToProps = {\n  hideModal,\n  removeReminder,\n  saveReminder,\n  setReminderField,\n};\n\nexport const ReminderContainer = connect(mapStateToProps, mapDispatchToProps)(_ReminderContainer);\n","import './App.scss';\n\nimport { CalendarContainer } from './features/calendar/components/CalendarContainer';\nimport { Credits } from './features/credits/Credits';\nimport React from 'react';\nimport { ReminderContainer } from './features/reminder/components/ReminderContainer';\n\nexport const App = () => (\n  <div className=\"app\">\n    <CalendarContainer />\n    <ReminderContainer />\n    <Credits />\n  </div>\n);\n","import * as actions from './calendarActions';\n\nimport { getCurrentMonth, getCurrentYear } from './calendarService';\n\nimport Immutable from 'seamless-immutable';\nimport { handleActions } from 'redux-actions';\n\nconst initialState = Immutable({\n  month: getCurrentMonth(),\n  year: getCurrentYear(),\n});\n\nexport const calendarReducer = handleActions(\n  {\n    [actions.setDate]: (state, { payload }) => {\n      return Immutable.set(state, 'month', payload.month).set('year', payload.year);\n    },\n  },\n  initialState,\n);\n","import * as R from 'ramda';\nimport * as actions from './reminderActions';\n\nimport Immutable from 'seamless-immutable';\nimport { handleActions } from 'redux-actions';\nimport moment from 'moment';\n\nconst DEFAULT_REMINDER = {\n  city: '',\n  color: 'Blue',\n  date: '',\n  name: '',\n  time: '',\n};\n\nconst initialState = Immutable({\n  reminders: [],\n  modal: {\n    display: false,\n    reminder: null,\n  },\n});\n\nconst getMomentDatetime = R.pipe(R.prop('datetime'), moment.bind(moment));\n\nconst getDate = R.pipe(getMomentDatetime, R.invoker(1, 'startOf')('day'), R.invoker(0, 'toDate'));\n\nconst getTime = R.pipe(getMomentDatetime, R.invoker(1, 'format')('HH:mm'));\n\nconst getReminder = R.pipe(\n  R.merge(DEFAULT_REMINDER),\n  R.converge(R.assoc('date'), [getDate, R.identity]),\n  R.converge(R.assoc('time'), [getTime, R.identity]),\n  R.dissoc('datetime'),\n);\n\nexport const reminderReducer = handleActions(\n  {\n    [actions.setModalDisplay]: (state, { payload }) => {\n      return Immutable.setIn(state, ['modal', 'display'], payload.display).setIn(\n        ['modal', 'reminder'],\n        getReminder(payload.reminder),\n      );\n    },\n    [actions.setReminders]: (state, { payload }) => {\n      return Immutable.set(state, 'reminders', payload);\n    },\n    [actions.setReminderField]: (state, { payload }) => {\n      return Immutable.setIn(state, ['modal', 'reminder', payload.name], payload.value);\n    },\n  },\n  initialState,\n);\n","import { calendarReducer } from '../features/calendar/calendarReducer';\nimport { combineReducers } from 'redux';\nimport { reminderReducer } from '../features/reminder/reminderReducer';\n\nexport default () =>\n  combineReducers({\n    calendar: calendarReducer,\n    reminder: reminderReducer,\n  });\n","import './index.scss';\nimport 'bulma/css/bulma.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport { App } from './App';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport configureStore from './application/configureStore';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { applyMiddleware, createStore } from 'redux';\n\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport createRootReducer from './createRootReducer';\nimport reduxLogger from 'redux-logger';\nimport reduxThunk from 'redux-thunk';\n\nexport default ({ preloadedState } = {}) => {\n  const middlewares = [reduxThunk];\n\n  if (process.env.REACT_APP_USE_REDUX_LOGGER === 'true') {\n    middlewares.push(reduxLogger);\n  }\n\n  const middlewareEnhancer = applyMiddleware(...middlewares);\n\n  const composedEnhancers = composeWithDevTools(middlewareEnhancer);\n\n  const store = createStore(createRootReducer(), preloadedState, composedEnhancers);\n\n  if (process.env.NODE_ENV === 'development' && module.hot) {\n    module.hot.accept('./createRootReducer', () => store.replaceReducer(createRootReducer()));\n  }\n\n  return store;\n};\n"],"sourceRoot":""}